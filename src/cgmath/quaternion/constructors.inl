#pragma once

#include "Quaternion.h"

////////////////////////////////////////////////////////////////////////////////
template<typename T>
Quaternion<T>::Quaternion():Quaternion(0,0,0,1){}
////////////////////////////////////////////////////////////////////////////////
template<typename T>
Quaternion<T>::Quaternion(const Quaternion& q):Quaternion(q.x,q.y,q.z,q.w){}
////////////////////////////////////////////////////////////////////////////////
template<typename T>
Quaternion<T>::Quaternion(const T x,const T y,const T z,const T w)
{ data[0] = x; data[1] = y; data[2] = z; data[3] = w; }
////////////////////////////////////////////////////////////////////////////////
template<typename T>
Quaternion<T>::Quaternion(const Mat<T,4,1>& v):Quaternion(v.x,v.y,v.z,v.w){}
////////////////////////////////////////////////////////////////////////////////
template<typename T>
Quaternion<T>::Quaternion(const Mat<T,3,1>& v,const T w):Quaternion(v.x,v.y,v.z,w){}
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
template<typename T>
Quaternion<T>& Quaternion<T>::operator = (const Quaternion<T>& q)
{ data[0] = q.x; data[1] = q.y; data[2] = q.z; data[3] = q.w; return *this; }
////////////////////////////////////////////////////////////////////////////////
template<typename T>
Quaternion<T>& Quaternion<T>::operator = (const Mat<T,4,1>& v)
{ data[0] = v.x; data[1] = v.y; data[2] = v.z; data[3] = v.w; return *this; }
////////////////////////////////////////////////////////////////////////////////
