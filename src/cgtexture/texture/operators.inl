#pragma once

#include <cstring>

#include "Texture.h"


////////////////////////////////////////////////////////////////////////////////
template<typename T>
inline Texture<T>& Texture<T>::operator = (const Texture& t)
{
	if(width != t.width || height != t.height)
	{
		width  = t.width;
		height = t.height;

		delete[] data;
		data = new pixel[width*height];
	}
	border = t.border;
	memcpy(data,t.data,sizeof(pixel)*width*height);
	return *this;
}
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
template<typename T>
typename Texture<T>::pixel&
Texture<T>::operator [] (const uint i)
{ return data[i]; }
////////////////////////////////////////////////////////////////////////////////
template<typename T>
const typename Texture<T>::pixel&
Texture<T>::operator [] (const uint i) const
{ return data[i]; }
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
template<typename T>
typename Texture<T>::pixel&
Texture<T>::operator () (const uint i,const uint j)
{ return data[width*j+i]; }
////////////////////////////////////////////////////////////////////////////////
template<typename T>
const typename Texture<T>::pixel&
Texture<T>::operator () (const uint i,const uint j) const
{ return data[width*j+i]; }
////////////////////////////////////////////////////////////////////////////////
